<?php
/**
 * Empty div's to be used for the ApplePay pop-up.
 */

$isConfigurable = $this->isConfigurable();

?>
<div id="buckaroo-apple-pay-button">
    <div id="set-up-apple-pay-button" class="apple-pay apple-pay-set-up-button apple-pay-set-up-button-black input-block-level d-none" style="display: none;"></div>
    <div id="apple-pay-button" class="apple-pay input-block-level d-none" style="display: none;"></div>
    <div id="apple-pay-wrapper" lang="en" class="apple-pay apple-pay-button apple-pay-button-black d-none" style="display: none;"></div>
    <div id="apple-pay-disabled" <?php echo $isConfigurable ? '' : 'style="display: none;"';?> class="apple-pay apple-pay-button apple-pay-button-black d-none"></div>
</div>

<script>
    <?php if ($isConfigurable): ?>
    /**
     * Only display real Apple Pay button if all attributes are configured.
     */
    var elementsToValidate = jQuery('#apple-pay-disabled, li[id^="option"] span, li[id^="option"] img, [name^="options"]');
    
    elementsToValidate.on('click, mousedown, mouseup', function() {
        /**
         * Custom validation for Amac.
         */
        var cartButton = jQuery('button.button.btn-cart');
        
        if(cartButton.hasClass('disabled')) {
            jQuery('.pdp-configurable-error').each(function () {
                jQuery(this).removeClass('no-display');
            });
            
            return;
        } else {
            jQuery('.pdp-configurable-error').each(function () {
                jQuery(this).addClass('no-display');
            });
        }
    
        /**
         * Validate Magento Configurable Product form.
         */
        var fakeButton = jQuery('#apple-pay-disabled');
        var applePay = jQuery('.method-checkout-cart-methods-applepay, #set-up-apple-pay-button, #apple-pay-button, #apple-pay-wrapper');
        
        var attributes = jQuery('[name^="super_attribute"]');
        var validated  = 0;
        
        attributes.each(function() {
            var valid = Validation.validate(this);
            
            if (valid === true) {
                validated++;
            }
            
            if (attributes.length === validated) {
                console.log('All attributes selected');
                
                fakeButton.hide();
                applePay.show();
                
                return;
            }
            
            fakeButton.show();
            applePay.hide();
        })
    })
    <?php endif; ?>
    
    var Buckaroo;
    (function(Buckaroo) {
        var Magento;
        (function(Magento) {
            var ApplePay = (function() {
                function ApplePay() {

                }

                /**
                 * Used to retrieve all data from the Quote and create ApplePay Payment Session.
                 */
                ApplePay.prototype.initialize = function() {
                    var optionsArray = this.createOptionsArray();
                    var options      = new BuckarooSdk.ApplePay.ApplePayOptions(
                        optionsArray.storeName, optionsArray.countryCode, optionsArray.currencyCode, optionsArray.cultureCode,
                        optionsArray.merchantIdentifier, optionsArray.lineItems, optionsArray.totalLineItems, optionsArray.shippingType,
                        optionsArray.shippingMethods, this.captureFunds, this.updateShippingMethod, this.updateShippingContact,
                        ["email", "name", "postalAddress"], ["email", "name", "phone", "postalAddress"]
                    );
                    
                    /**
                     * Hooking into this event allows overriding the options with custom values.
                     */
                    jQuery(document).trigger('buckaroo3extended_applepay_options', [this, options]);

                    BuckarooSdk.ApplePay.checkApplePaySupport(optionsArray.merchantIdentifier).then(function (applePaySupported) {
                        if (applePaySupported) {
                            var payment = new BuckarooSdk.ApplePay.ApplePayPayment('#apple-pay-wrapper', options)
                            <?php if (!$isConfigurable): ?>
                            jQuery('.method-checkout-cart-methods-applepay, #set-up-apple-pay-button, #apple-pay-button, #apple-pay-wrapper').show();
                            <?php endif; ?>
                            payment.showPayButton('black')
                        } else {
                            jQuery('#apple-pay-disabled').hide();
                        }
                    })
                }

                /**
                 * Triggered when Shipping Method is changed within the pop-up.
                 */
                ApplePay.prototype.updateShippingMethod = function(method) {
                    var update = jQuery.ajax(
                        {
                            url: '/buckaroo3extended/checkout/updateShippingMethods',
                            method: 'post',
                            context: this,
                            data: {
                                wallet: method
                            },
                            async: false,
                            dataFilter: function(data, type) {
                                var dataArray = JSON.parse(data);

                                return JSON.stringify({
                                    newTotal: new ApplePay.prototype.processTotalLineItems(dataArray),
                                    newLineItems: new ApplePay.prototype.processLineItems(dataArray)
                                })
                            }
                        }
                    );

                    return Promise.resolve(update);
                }

                /**
                 * Updates the shipping method in the quote.
                 */
                ApplePay.prototype.setShippingMethod = function (method) {
                    jQuery.ajax(
                        {
                            url: '/buckaroo3extended/checkout/setShippingMethod',
                            method: 'post',
                            context: this,
                            data: {
                                method: method
                            },
                            success: function(response) {
                                // Done!
                            }
                        }
                    );
                }

                /**
                 * Handles the changes within the pop-up when a different shipping address is selected.
                 *
                 * Method = GET, since we need to send a serialized form if the product is configurable.
                 */
                ApplePay.prototype.updateShippingContact = function(context) {
                    var options = jQuery('#product_addtocart_form').serializeArray()
                    
                    var update = jQuery.ajax(
                        {
                            url: '<?php echo $this->getControllerUrl(); ?>',
                            method: 'get',
                            context: this,
                            data: {
                                wallet: context,
                                product: {
                                    id: '<?php echo $this->getProductId(); ?>',
                                    qty: jQuery('.add-to-cart #qty').val(),
                                    options: options
                                }
                            },
                            dataType: 'json',
                            async: false,
                            dataFilter: function(data, type) {
                                var dataArray = JSON.parse(data);

                                return JSON.stringify({
                                        errors: [],
                                        newShippingMethods: new ApplePay.prototype.createShippingMethodInformation(dataArray, false),
                                        newTotal: new ApplePay.prototype.processTotalLineItems(dataArray),
                                        newLineItems: new ApplePay.prototype.processLineItems(dataArray)
                                })
                            },
                            error: function(error) {
                                /** Reload window to show error in Magento */
                                window.location.reload();
                            }
                        }
                    );

                    return update;
                }

                /**
                 * Pours all necessary data retrieved from the quote into its right format.
                 *
                 * @returns {{lineItems: *, merchantIdentifier: *, cultureCode: *, countryCode: (string), totalLineItems: *, shippingType: string, storeName: *, currencyCode: *, shippingMethods: *}}
                 */
                ApplePay.prototype.createOptionsArray = function() {
                    return {
                        storeName: '<?php echo $this->getStoreName() ?>',
                        countryCode: '<?php echo $this->getCountryCode() ?>',
                        currencyCode: '<?php echo $this->getCurrency() ?>',
                        cultureCode: '<?php echo $this->getCultureCode() ?>',
                        merchantIdentifier: '<?php echo $this->getGuid() ?>',
                        lineItems: this.processLineItems(null),
                        totalLineItems: this.processTotalLineItems(null),
                        shippingType: 'shipping',
                        shippingMethods: this.createShippingMethodInformation(undefined, true)
                    }
                }

                /**
                 *
                 *
                 * @param data
                 * @returns {*[]}
                 */
                ApplePay.prototype.processLineItems = function(data) {
                    if (data === null || data === undefined || data.length < 1) {
                        return [
                            {label: '<?php echo $this->getSubtotalText(); ?>', amount: '0.00', type: 'final'},
                            {label: '<?php echo $this->__('Delivery costs'); ?>', amount: '0.00', type: 'final'},
                            {label: '<?php echo $this->__('Payment fee'); ?>', amount: '0.00', type: 'final'}
                        ]
                    }

                    if (typeof data['shipping'] !== 'undefined') {
                        var price = parseFloat(data['shipping'])
                    }
                    var payment = parseFloat(data['paymentFee'])

                    return [
                        {label: '<?php echo $this->getSubtotalText(); ?>', amount: parseFloat(data['subTotal']).toFixed(2), type: 'final'},
                        {label: '<?php echo $this->__('Delivery costs'); ?>', amount: price.toFixed(2), type: 'final'},
                        {label: '<?php echo $this->__('Payment fee'); ?>', amount: payment.toFixed(2), type: 'final'}
                    ]
                }

                /**
                 * Processes the total lines for display.
                 *
                 * @param data
                 * @returns {{amount: string, label: string, type: string}}
                 */
                ApplePay.prototype.processTotalLineItems = function(data) {
                    if (data === null || data === undefined || data.length < 1) {
                        return {
                            label: '<?php echo $this->getStoreName(); ?>',
                            amount: '0.00',
                            type: 'final'
                        }
                    }

                    var grandTotal = parseFloat(data['grandTotal'])

                    return {
                        label: '<?php echo $this->getStoreName(); ?>', amount: grandTotal.toFixed(2) , type: 'final'
                    }
                }

                /**
                 * Processes the available information about the selected shipping method.
                 *
                 * @param shippingMethods
                 * @param onPageLoad
                 * @returns {{identifier, amount: string, label: *, detail: string}[]}
                 */
                ApplePay.prototype.createShippingMethodInformation = function(shippingMethods, onPageLoad = true) {
                    var methods = [];
                    
                    if (onPageLoad === false && shippingMethods[0] === undefined) {
                        /** An error is thrown and displayed in the cart, if no shipping methods are available. */
                        window.location.href = "/checkout/cart";
                        
                        return methods;
                    }
                    
                    if (shippingMethods === undefined) {
                        return methods;
                    }

                    for(var i = 0; i < Object.keys(shippingMethods).length; i++) {
                        if (shippingMethods[i] === undefined) {
                            continue;
                        }
                        methods[i] = {
                                label: shippingMethods[i].carrier_title,
                                amount: shippingMethods[i].price.toString(),
                                identifier: shippingMethods[i].code,
                                detail: shippingMethods[i].method_title
                        }
                    }

                    return methods;
                }

                /**
                 * Callback function used for processing the payment and sending it to Buckaroo.
                 *
                 * @param payment
                 * @returns {Promise<{errors: Array, status: *}>}
                 */
                ApplePay.prototype.captureFunds = function(payment) {
                    var authorizationResult = {
                        status: ApplePaySession.STATUS_SUCCESS,
                        errors: []
                    }
                    if(authorizationResult.status === ApplePaySession.STATUS_SUCCESS) {
                        new ApplePay.prototype.placeOrder(payment)
                    } else {
                        var errors = authorizationResult.errors.map(function(error) {
                            return error.message
                        })
                        this.showError('<?php echo $this->__('Your payment could not be processed: '); ?>' + errors.join(' '))
                        authorizationResult.errors.forEach(function(error) {
                            console.error(error.message + ' (' + error.contactField + ': ' + error.code + ').')
                        })
                    }
                    return Promise.resolve(authorizationResult)
                }

                /**
                 * Saves order to Magento and sends it to Buckaroo.
                 *
                 * @param payment
                 */
                ApplePay.prototype.placeOrder = function(payment) {
                    jQuery.ajax(
                        {
                            url: '/buckaroo3extended/checkout/saveOrder',
                            method: 'post',
                            context: this,
                            data: {
                                payment: payment
                            },
                            success: function(response) {
                                window.location.href = '/buckaroo3extended/checkout/applepaySuccess';
                            },
                            error: function(error) {
                                /** Reload window to show error in Magento */
                                window.location.reload();
                            }
                        }
                    );
                }

                return ApplePay
            }())
            Magento.ApplePay = ApplePay
        })(Magento = Buckaroo.Magento || (Buckaroo.Magento = {}))
    })(Buckaroo || (Buckaroo = {}));

    (function () {
        var handler = new Buckaroo.Magento.ApplePay();
        handler.initialize();
    })();
</script>